#+title: Тесты примеров и запуск через Nix flake
#+author: async-emacs-lisp

* Обзор
В репозитории есть ERT-тесты, покрывающие основные примеры из статьи. Они запускаются через Nix flake и стараются быть устойчивыми к отсутствию сети и особенностям batch-режима Emacs.

Структура:
- =tests/test-examples.el= — сами тесты (ERT)
- =tests/test-runner.el= — раннер для batch-запуска
- =flake.nix= — окружение (Emacs с пакетами, утилиты) и команда для запуска

* Запуск тестов
Всё, что нужно — установленный Nix и разрешение =nix flakes=.

Варианты:
- Разовый запуск:
  #+begin_src sh
  nix run .#test
  #+end_src

- Зайти в окружение разработчика и запустить:
  #+begin_src sh
  nix develop
  run-tests
  #+end_src

- Запустить один тест или подмножество через селектор ERT:
  #+begin_src sh
  # конкретный тест по имени (символ)
  ERT='ex-async-start-process-uname' nix run .#test

  # по регулярному выражению (например, только сетевые)
  ERT='(regexp "plz\\|url")' nix run .#test
  #+end_src

Тест-раннер читает селектор из переменных окружения =ERT= или =ERT_SELECTOR= и передаёт его в =(ert-run-tests-batch-and-exit ...)=.

* Зависимости и окружение
Flake поднимает минимально нужное окружение:
- Emacs с пакетами: =async=, =plz=
- Инструменты: =bash=, =coreutils= (=printf=, =yes=, =head=, =du=, =uname=, …), =ripgrep= (=rg=), =curl=

Пути инструментов автоматически добавляются в =PATH= внутри оболочки и при запуске через =nix run=.

* Поведение и допущения тестов
- Сеть:
  - Тесты стараются автоматически определять доступность сети и аккуратно пропускаться (skip) при её отсутствии.
  - =plz= использует =curl= — он включён во flake. При сетевых сбоях тест будет =skip=.
- Таймеры:
  - В batch-режиме Emacs idle-таймеры работают нестабильно, поэтому тест =ex-run-with-idle-timer-once= помечен как =skip= при =noninteractive=. В интерактивном Emacs запустите его через =M-x ert=.
- Процессы:
  - Тесты используют =make-process= и =async-start-process=. Для примера с =uname= тест читает выход из буфера, переданного в колбэк =async-start-process=.
- Ограничение буфера и «бэкпрешр»:
  - Демонстрация обрезки буфера при превышении лимита (пример с =yes|head=) проходит без сетевых зависимостей.
- Ripgrep:
  - Пример создаёт временную директорию и файл с «TODO», затем проверяет, что =rg= вернул результат.

* Типичные проблемы
- «Cannot open load file …/test-examples.el» при запуске через nix:
  - Flake должен копировать директорию =tests= в стор; актуальный =flake.nix= это делает.
- =git= жалуется, что =flake.nix= не в индексе:
  - Выполните =git add flake.nix tests/=.
- Сетевые таймауты:
  - Такие тесты помечаются как =skip=, чтобы не «красить» сборку.

* Как добавлять новые тесты
- Добавляйте =ert-deftest= в =tests/test-examples.el=.
- Для сетевых примеров используйте хелпер =(test-network-available-p)= и по возможности задавайте короткие таймауты.
- Воспользуйтесь макросом =test-with-temp-dir= для файловых сценариев.
- При необходимости внешних утилит — добавьте их в список =tools= во =flake.nix=.

* Локальный интерактивный прогон
Откройте Emacs (внутри =nix develop=, чтобы были пакеты и утилиты), загрузите тесты:
#+begin_src elisp
(load-file "tests/test-examples.el")
(M-x ert)
